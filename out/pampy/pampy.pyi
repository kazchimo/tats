from pampy.helpers import BoxedArgs as BoxedArgs, HeadType as HeadType, NoDefault as NoDefault, PaddedValue as PaddedValue, TailType as TailType, UnderscoreType as UnderscoreType, get_extra as get_extra, get_lambda_args_error_msg as get_lambda_args_error_msg, get_real_type as get_real_type, is_dataclass as is_dataclass, is_generic as is_generic, is_newtype as is_newtype, is_typing_stuff as is_typing_stuff, is_union as is_union, pairwise as pairwise, peek as peek
from typing import Any, Generic, List, Tuple, TypeVar

T = TypeVar('T')
ANY: Any
_: UnderscoreType
HEAD: Any
REST: Any
TAIL: Any

def run(action: Any, var: Any): ...
def match_value(pattern: Any, value: Any) -> Tuple[bool, List]: ...
def match_dict(pattern: Any, value: Any) -> Tuple[bool, List]: ...
def only_padded_values_follow(padded_pairs: Any, i: Any): ...
def match_iterable(patterns: Any, values: Any) -> Tuple[bool, List]: ...
def match_typing_stuff(pattern: Any, value: Any) -> Tuple[bool, List]: ...
# def match_generic(pattern: Generic[T], value: Any) -> Tuple[bool, List]: ...
def match(var: Any, *args: Any, default: Any = ..., strict: bool = ...): ...

class MatchError(Exception):
    def __init__(self, msg: Any) -> None: ...
